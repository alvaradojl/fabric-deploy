---
- name: Setup few variables
  set_fact:
    network: "{{ fabric.network }}"
    fabricpath: "/opt/gopath/src/github.com/hyperledger/fabric"
    gopath: "/opt/gopath"

- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas }}"
    peerls: "{{ peerls | default([]) + item.value.peers }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers }}"
    kafkals: "{{ kafkasls | default([]) + item.value.kafkas }}"
  with_dict: "{{ fabric.network }}"

- name: Get ca object list
  set_fact:
    cas: |
      {{ cas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item.split('.')[:-1] | join('.') }] }}
  with_items: "{{ cals }}"

- name: Sort the ca list
  set_fact:
    cas: "{{ cas | sort(attribute='org') }}"

- name: Get peer object list
  set_fact:
    peers: |
      {{ peers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1].split('.')[:-1] | join('.'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Sort the peer list
  set_fact:
    peers: "{{ peers | sort(attribute='org') }}"

- name: Get orderer object list
  set_fact:
    orderers: |
      {{ orderers | default([]) + [{'org':item.split('.')[-1],
        'name':item.split('.')[:-1] | join('.') }] }}
  with_items: "{{ ordererls }}"

- name: Sort the orderer list
  set_fact:
    orderers: "{{ orderers | sort(attribute='org') }}"

- name: Ensure crypto config directory is clean
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ fabricpath }}/keyfiles"

- name: Create crypto-config file
  template:
    src: "roles/certsetup/templates/crypto-config.j2"
    dest: "{{ fabricpath }}/crypto-config.yml"

- name: Now create the certificate files
  command: "build/bin/cryptogen generate --config crypto-config.yml --output keyfiles"
  args:
    chdir: "{{ fabricpath }}"