---
- name: Retrieve specified flavor
  set_fact:
    current_host: "{{ hostvars[inventory_hostname].inter_name }}"
    fabricworkdir: "/opt/gopath/fabric"
    gopath: "/opt/gopath"
    cas: "{{ [] }}"
    peers: "{{ [] }}"
    orderers: "{{ [] }}"
    kafkas: "{{ [] }}"
    kafkanodes: ""
    zookeepers: "{{ [] }}"
    znodes: ""
    zkparam: ""
    index: 1
    zoo_ids: "{{ {} }}"
    kafka_ids: "{{ {} }}"

- name: Make sure that working directory exists and clean
  file:
    path: "{{ fabricworkdir }}/run"
    state: "{{ item }}"
    mode: 0775
  with_items:
    - "absent"
    - "directory"

- name: Create component list
  set_fact:
    zookeeperls: "{{ zookeeperls | default([]) + item.value.zookeepers | default([]) }}"
    kafkals: "{{ kafkals | default([]) + item.value.kafkas | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name: Sort component list
  set_fact:
    zookeeperls: "{{ zookeeperls | sort }}"
    kafkals: "{{ kafkals | sort }}"    

- name: Generate zookeeper node list
  set_fact:
    znodes: "{{ znodes }} server.{{ index }}={{ item }}:2888:3888"
    zkparam: "{{ zkparam + item }}:2181 "
    zoo_ids: "{{ zoo_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ zookeeperls | default([]) }}"

- name: Reset the index
  set_fact:
    index: 1

- name: Generate kafka broker ids
  set_fact:
    kafka_ids: "{{ kafka_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ kafkals | default([]) }}"

- name: Get ca container list
  set_fact:
    cas: |
      {{ cas + [{'org':item.split('.')[-1],
        'name':item.split('.')[:-1] | join('.') }] }}
  with_items: "{{ fabric.network[current_host].cas | default([]) }}"      

- name: Get peer container list
  set_fact:
    peers: |
      {{ peers + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1].split('.')[:-1] | join('.'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ fabric.network[current_host].peers | default([]) }}"      

- name: Get orderer container list
  set_fact:
    orderers: |
      {{ orderers + [{'org':item.split('.')[-1],
        'name':item.split('.')[:-1] | join('.') }] }}
  with_items: "{{ fabric.network[current_host].orderers | default([]) }}"      

- name: Set zookeeper and kafka container list
  set_fact:
    zookeepers: "{{ fabric.network[current_host].zookeepers | default([]) }}"
    kafkas: "{{ fabric.network[current_host].kafkas | default([]) }}"

- name: Pull certificates from the builder machine
  command: >-
    scp -i "{{ gopath }}/id_rsa" -r -o "StrictHostKeyChecking no" "{{ cluster.
    ssh_user }}@{{ hostvars[groups['builders'][0]].private_ip }}:{{ fabricworkdir }}/certs.tgz"
    "{{ fabricworkdir }}/allcerts.tgz"

- name: Unpack the certificates
  unarchive:
    src: "{{ fabricworkdir }}/allcerts.tgz"
    dest: "{{ fabricworkdir }}/run"
    remote_src: true

- name: Create docker compose files
  template:
    src: "roles/fabricsetup/templates/{{ item.name }}.j2"
    dest: "{{ fabricworkdir }}/run/{{ item.name }}.yml"
  when: item.flag | length > 0
  with_items:
    - { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
    - { name: "kafka-compose", flag: "{{ kafkas }}" }
    - { name: "ca-compose", flag: "{{ cas }}" }
    - { name: "peer-compose", flag: "{{ peers }}" }
    - { name: "orderer-compose", flag: "{{ orderers }}" }

- name: Shut down fabric component first
  command: "docker-compose -p {{ item.name }} -f {{ fabricworkdir }}/run/{{ item.name }}.yml down"
  when: item.flag | length > 0
  with_items:
    - { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
    - { name: "kafka-compose", flag: "{{ kafkas }}" }
    - { name: "ca-compose", flag: "{{ cas }}" }
    - { name: "peer-compose", flag: "{{ peers }}" }
    - { name: "orderer-compose", flag: "{{ orderers }}" }
  tags: "fabricdown"

- name: Start fabric components
  command: "docker-compose -p {{ item.name }} -f {{ fabricworkdir }}/run/{{ item.name }}.yml up -d"
  when: item.flag | length > 0
  with_items:
    - { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
    - { name: "kafka-compose", flag: "{{ kafkas }}" }
    - { name: "ca-compose", flag: "{{ cas }}" }
    - { name: "peer-compose", flag: "{{ peers }}" }
    - { name: "orderer-compose", flag: "{{ orderers }}" }
  tags: "fabricup"