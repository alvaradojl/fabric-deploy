---
- name: Setup env specific variables
  set_fact:
    aws_usr_key: "{{ auth.username | default(lookup('env', 'AWS_ACCESS_KEY')) }}"  #check first in aws.yml. if not, look in env vars
    aws_sec_key: "{{ auth.password | default(lookup('env', 'AWS_SECRET_KEY')) }}"

- name: Retrieve AWS specific image flavor
  ec2_ami_find:
    region: "{{ cluster.region_name }}"
    #owner: 099720109477 # this is a unique id to search for ubuntu provided images. keeping it here for future reference, as it was hard to find
    name: "{{ cluster.image_name }}"
    virtualization_type: hvm
    is_public: yes
    sort: name
    sort_order: descending
    sort_end: 4
    no_result_action: fail
  register: found_amis

- name: Set  ubuntu ami_id
  set_fact:
    ubuntu_ami_id: "{{ (found_amis.results | first).ami_id  }}"

- name: Create a key-pair
  ec2_key:
    name: "{{ cluster.ssh_key_name }}"
    aws_access_key: "{{ aws_usr_key }}"
    aws_secret_key: "{{ aws_sec_key }}"
    region: "{{ cluster.region_name | default('us-east-1') }}" # Virginia
    key_material: "{{ item }}"
    state: present
  with_file: "{{ cluster.public_key_file }}"
  register: ec2_key_result

- name: Create EC2 security group
  ec2_group:
    name: "{{ cluster.security_group }}"
    description: EC2 security group for Fabric.
    region: "{{ cluster.region_name | default('us-east-1') }}" # Virginia
    aws_access_key: "{{ aws_usr_key }}"
    aws_secret_key: "{{ aws_sec_key }}"
    state: present
    rules: 
      - proto: tcp 
        from_port: 22 
        to_port: 22 
        cidr_ip: 0.0.0.0/0 
      - proto: tcp 
        from_port: 179 
        to_port: 179 
        cidr_ip: 0.0.0.0/0 
      - proto: tcp 
        from_port: 80 
        to_port: 80 
        cidr_ip: 0.0.0.0/0 
      - proto: icmp 
        from_port: -1 
        to_port: -1 
        cidr_ip: 0.0.0.0/0 
      - proto: udp 
        from_port: 53 
        to_port: 53 
        cidr_ip: 0.0.0.0/0
      - proto: udp 
        from_port: 8285 
        to_port: 8285 
        cidr_ip: 0.0.0.0/0
      - proto: tcp 
        from_port: 1000 
        to_port: 65535 
        cidr_ip: 0.0.0.0/0
    rules_egress: 
      - proto: tcp 
        from_port: 179 
        to_port: 179 
        cidr_ip: 0.0.0.0/0 
      - proto: icmp 
        from_port: -1 
        to_port: -1 
        cidr_ip: 0.0.0.0/0
      - proto: udp 
        from_port: 53 
        to_port: 53 
        cidr_ip: 0.0.0.0/0 
      - proto: tcp 
        from_port: 1000 
        to_port: 65535 
        cidr_ip: 0.0.0.0/0
  register: sg_result

- name: Add provisioning host group
  add_host:
    name: "{{ cluster.name_prefix }}{{ item }}"
    ansible_host: "127.0.0.1"
    groups: "prohosts"
  with_sequence: count={{ cluster.stack_size }} format=%03x
  no_log: True  
